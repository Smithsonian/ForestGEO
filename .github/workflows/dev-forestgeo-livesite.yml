# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: ForestGEO Development Live Site Deployment Pipeline

on:
  push:
    branches:
      - 'forestgeo-app-*'
  workflow_dispatch:

jobs:
  build-app-development:
    if: startsWith(github.ref, 'refs/heads/forestgeo-app-')
    runs-on: ubuntu-latest
    environment: development_temp

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v4.0.4
        with:
          node-version: '20.x'

      - name: create env file (in frontend/ directory) -- development
        id: create-env-file-dev
        run: |
          touch frontend/.env
          echo AUTH_MICROSOFT_ENTRA_ID_SECRET=${{ secrets.AUTH_MICROSOFT_ENTRA_ID_SECRET }} >> frontend/.env
          echo AUTH_MICROSOFT_ENTRA_ID_ID=${{ secrets.AUTH_MICROSOFT_ENTRA_ID_ID }} >> frontend/.env
          echo AUTH_MICROSOFT_ENTRA_ID_ISSUER=${{ secrets.AUTH_MICROSOFT_ENTRA_ID_ISSUER }} >> frontend/.env
          echo AUTH_SECRET=${{ secrets.AUTH_SECRET }} >> frontend/.env
          echo AUTH_URL=${{ secrets.AUTH_URL }} >> frontend/.env
          echo AUTH_FUNCTIONS_POLL_URL=${{ secrets.AUTH_FUNCTIONS_POLL_URL }} >> frontend/.env
          echo AZURE_SQL_USER=${{ secrets.AZURE_SQL_USER }} >> frontend/.env
          echo AZURE_SQL_PASSWORD=${{ secrets.AZURE_SQL_PASSWORD }} >> frontend/.env
          echo AZURE_SQL_SERVER=${{ secrets.AZURE_SQL_SERVER }} >> frontend/.env
          echo AZURE_SQL_DATABASE=${{ secrets.AZURE_SQL_DATABASE }} >> frontend/.env
          echo AZURE_SQL_PORT=${{ secrets.AZURE_SQL_PORT }} >> frontend/.env
          echo AZURE_STORAGE_SAS_CONNECTION_STRING=${{ secrets.AZURE_STORAGE_SAS_CONNECTION_STRING }} >> frontend/.env
          echo AZURE_SQL_SCHEMA=${{ secrets.AZURE_SQL_SCHEMA }} >> frontend/.env
          echo AZURE_SQL_CATALOG_SCHEMA=${{ secrets.AZURE_SQL_CATALOG_SCHEMA }} >> frontend/.env
          echo AZURE_STORAGE_CONNECTION_STRING=${{ secrets.AZURE_STORAGE_CONNECTION_STRING }} >> frontend/.env
          echo APP_INSIGHTS_CONNECTION_STRING=${{ secrets.APP_INSIGHTS_CONNECTION_STRING }} >> frontend/.env
          echo NEXTAUTH_DEBUG=true >> frontend/.env
          echo NODE_ENV=development >> frontend/.env
          echo NEXT_RUNTIME=nodejs >> frontend/.env
          echo OTEL_LOG_LEVEL=debug >> frontend/.env
          echo REACT_EDITOR=code >> frontend/.env
          echo PORT=3000 >> frontend/.env
          echo FG_PAT=${{ secrets.FG_PAT }} >> frontend/.env
          echo OWNER=${{ secrets.OWNER }} >> frontend/.env
          echo REPO=${{ secrets.REPO }} >> frontend/.env

      #      - name: Cache node modules
      #        uses: actions/cache@v2
      #        with:
      #          path: frontend/node_modules
      #          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      #          restore-keys: |
      #            ${{ runner.os }}-node-

      #      - name: Cache Next.js build
      #        uses: actions/cache@v2
      #        with:
      #          path: frontend/build/cache
      #          key: ${{ runner.os }}-next-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/.next/cache') }}
      #          restore-keys: |
      #            ${{ runner.os }}-next-
      #            ${{ runner.os }}-next-${{ hashFiles('**/package-lock.json') }}

      - name: move into frontend --> npm install, build, and test
        run: |
          cd frontend/
          npm install
          npm run build
          npm run test --if-present

      - name: Move directories into build/standalone to reduce app load
        run: |
          mv ./frontend/build/static ./frontend/build/standalone/build
          mv ./frontend/public ./frontend/build/standalone

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: frontend/build/standalone

  deploy-app-development:
    needs: build-app-development
    runs-on: ubuntu-latest
    environment: development_temp

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-build
          path: frontend/build/standalone

      - name: 'Deploy to Azure Web App (development)'
        id: deploy-to-webapp-dev
        if: startsWith(github.ref, 'refs/heads/forestgeo-app-')
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'forestgeo-development'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_DEVELOPMENT }}
          package: frontend/build/standalone

      - name: Install MySQL client
        run: sudo apt-get update && sudo apt-get install -y mysql-client
          
      - name: Fetch notification recipients
        id: get_recipients
        env:
          DB_HOST: ${{ secrets.AZURE_SQL_SERVER }}
          DB_USER: ${{ secrets.AZURE_SQL_USER }}
          DB_PASS: ${{ secrets.AZURE_SQL_PASSWORD }}
          DB_NAME: ${{ secrets.AZURE_SQL_DATABASE }}
        run: |
          # grab only the email column, one per line, no headers
          EMAILS=$(mysql --batch --skip-column-names \
            -h "$DB_HOST" \
            -u "$DB_USER" \
            -p"$DB_PASS" \
            -D "$DB_NAME" \
            -e "SELECT Email FROM catalog.users WHERE IsAdmin IS TRUE;" \
            | paste -sd "," -)
          echo "emails=$EMAILS" >> $GITHUB_OUTPUT

      - name: Checkout code (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Collect merged commit messages
        id: collect_messages
        run: |
          MESSAGES=$(git log --no-merges \
          --format='- %s' \
          ${{ github.event.before }}..${{ github.sha }})
          
          echo "messages<<EOF" >> $GITHUB_OUTPUT
          echo "$MESSAGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send deployment notification
        if: ${{ success() }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.NOTIFS_EMAIL_SOURCE }}
          password: ${{ secrets.NOTIFS_EMAIL_PWD }}
          secure: false

          from: "ForestGEO Automated Notifications <${{ secrets.NOTIFS_EMAIL_SOURCE }}>"
          to: ${{ steps.get_recipients.outputs.emails }}

          # subject & body
          subject: "üöÄ Deployment to ${{ github.ref_name }} succeeded"
          body: |
            Hello ForestGEO Users,

            The branch `${{ github.ref_name }}` was just deployed successfully! 
            Please review the following commit details for more information:

            ‚Ä¢ Commit SHA: `${{ github.sha }}`
            ‚Ä¢ Commit message:
              > ${{ steps.collect_messages.outputs.messages }}

            Cheers,
            GitHub Actions

  notify-failure:
    if: always() && (needs.build-app-development.result == 'failure' || needs.deploy-app-development.result == 'failure')
    needs: [build-app-development, deploy-app-development]
    runs-on: ubuntu-latest
    environment: development_temp

    steps:
      - name: Checkout code for failure analysis
        uses: actions/checkout@v4

      - name: Collect failure information
        id: failure_info
        run: |
          echo "workflow_run_id=${{ github.run_id }}" >> $GITHUB_OUTPUT
          echo "workflow_url=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_OUTPUT
          echo "commit_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "branch_name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "build_status=${{ needs.build-app-development.result }}" >> $GITHUB_OUTPUT
          echo "deploy_status=${{ needs.deploy-app-development.result }}" >> $GITHUB_OUTPUT
          
          # Determine which job failed
          if [[ "${{ needs.build-app-development.result }}" == "failure" ]]; then
            echo "failed_job=build-app-development" >> $GITHUB_OUTPUT
            echo "failure_stage=Build" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.deploy-app-development.result }}" == "failure" ]]; then
            echo "failed_job=deploy-app-development" >> $GITHUB_OUTPUT  
            echo "failure_stage=Deployment" >> $GITHUB_OUTPUT
          else
            echo "failed_job=unknown" >> $GITHUB_OUTPUT
            echo "failure_stage=Unknown" >> $GITHUB_OUTPUT
          fi

      - name: Get commit information
        id: commit_info
        run: |
          COMMIT_MSG=$(git log -1 --pretty=format:'%s')
          COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an <%ae>')
          echo "commit_message=$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "commit_author=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT

      - name: Send failure notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.NOTIFS_EMAIL_SOURCE }}
          password: ${{ secrets.NOTIFS_EMAIL_PWD }}
          secure: false

          from: "ForestGEO Automated Notifications <${{ secrets.NOTIFS_EMAIL_SOURCE }}>"
          to: ${{ secrets.DEVELOPER_EMAIL }}

          subject: "‚ùå ForestGEO Deployment Failed - ${{ steps.failure_info.outputs.failure_stage }} Error on ${{ steps.failure_info.outputs.branch_name }}"
          body: |
            Hello,

            The ForestGEO deployment pipeline has failed during the ${{ steps.failure_info.outputs.failure_stage }} stage.

            ## Failure Details
            ‚Ä¢ **Failed Job**: ${{ steps.failure_info.outputs.failed_job }}
            ‚Ä¢ **Branch**: ${{ steps.failure_info.outputs.branch_name }}
            ‚Ä¢ **Commit SHA**: ${{ steps.failure_info.outputs.commit_sha }}
            ‚Ä¢ **Build Status**: ${{ steps.failure_info.outputs.build_status }}
            ‚Ä¢ **Deploy Status**: ${{ steps.failure_info.outputs.deploy_status }}

            ## Commit Information
            ‚Ä¢ **Message**: ${{ steps.commit_info.outputs.commit_message }}
            ‚Ä¢ **Author**: ${{ steps.commit_info.outputs.commit_author }}

            ## Debugging Information
            ‚Ä¢ **Workflow Run**: ${{ steps.failure_info.outputs.workflow_url }}
            ‚Ä¢ **Run ID**: ${{ steps.failure_info.outputs.workflow_run_id }}

            ## Next Steps
            1. Check the workflow logs at the URL above
            2. Review the failed job details in the GitHub Actions tab
            3. Look for error messages in the specific step that failed
            4. Common failure points:
               - Build failures: Check for dependency issues, TypeScript errors, or test failures
               - Deploy failures: Check Azure credentials, app service configuration, or artifact upload issues

            ## Quick Actions
            - View logs: ${{ steps.failure_info.outputs.workflow_url }}
            - Repository: https://github.com/${{ github.repository }}
            - Commit: https://github.com/${{ github.repository }}/commit/${{ steps.failure_info.outputs.commit_sha }}

            This is an automated notification sent only to the developer operating this codebase.

            Best regards,
            GitHub Actions
